/**
 * @file
 * @author Ryan Little
 */

#ifndef ZNROTATIONCRYPTOSYSTEM_CRYPTOSYSTEM_H
#define ZNROTATIONCRYPTOSYSTEM_CRYPTOSYSTEM_H

#include "sampling.h"
#include "utils.h"
#include <math.h>

/**
 * Class to perform key generation, encryption, and decryption.
 */
class Cryptosystem {
    private:

    /**
     * Private key, to be generated by Cryptosystem::generate_keys().
     */
    arma::Mat<int> B;

    /**
    * Public key, to be generated by Cryptosystem::generate_keys().
    */
    arma::Mat<int> G;

    /**
     * Dimension.
     */
    const int n;

    /**
     * Number of vectors to sample from discrete Gaussian in key generation. Must be >= n.
     */
    const int k;

    /**
     * Noise parameter used in encryption.
     */
    const double r;

    /**
     * Parameter controlling length of public key basis, used in key generation.
     */
    const double s;

    /**
     * Distance threshold used in decryption.
     */
    const double d;

    /**
     * Additional parameter controlling length of public key basis, used in key generation.
     */
    const double t;

public:
    Cryptosystem(int n, int k, double r, double s, double d, double t) : n(n), k(k), r(r), s(s), d(d), t(t)  {}

    /**
     * Generate public and private key pair. Results are stored in class members B (for private key)
     * and G (for public key).
     */
    void generate_keys();

    /**
     * Encrypts a bit under a public key. If b=1, ciphertext is sampled uniformly from [0,1)^n.
     * Otherwise, ciphertext is sampled from continuous Gaussian with covariance matrix r^2*G^(-1), and taken modulo 1.
     *
     * @param pk The public key, i.e. G = (B^T)B
     * @param b  Plaintext bit to be encrypted
     * @return   The ciphertext
     */
    arma::vec encrypt(arma::Mat<int> pk, bool b);

    /**
     * Decrypts a ciphertext under a private key. Computes t := c*B where c is the ciphertext and B is the private key,
     * and returns true if the distance between t and the integer lattice is >d, otherwise returns false.
     *
     * @param sk The private key, i.e. B
     * @param c  The ciphertext
     * @return   The decrypted ciphertext
     */
    bool decrypt(arma::Mat<int> sk, arma::vec c);

    const arma::Mat<int> &getB() { return B; }

    const arma::Mat<int> &getG() { return G; }
};

#endif //ZNROTATIONCRYPTOSYSTEM_CRYPTOSYSTEM_H
